# package names must be snake cased with letters (any language)
# import XRegExp from 'https://deno.land/x/xregexp/src/index.js'
# matchingLetters = XRegExp(`(\p{L}\p{M}*)+`)

# only the creator can change
    # toolInfo
    #     what the latest version / subversion is
# others can
    # add sources for a particular version
# recursive hash uses wtf-8, sorts folder contents alpha-numerically smallest first, hashes file names and file contents
    # NOTE: this does pose an issue for systems that are not case sensitive, or that simplify (ex: truncate) file names
    # TODO: when hashing a source, give warnings that some systems might not be able to handle/recieve a version because of this limitation
    # maybe create a zip-hasher that would tell what the recursive hash would be if no name simplification was performed
# dependencies come in two flavors
    # 1. source code dependencies: there is a hash of the source code 
    # 2. specification dependencies: there is simply a list of qualifications
{
    identification: {
        publicVerificationKey: "",
        entityUuid: "", # if not given autogenerated from first publicVerificationKey
    },
    createIdenity: {
        entityUuid: "", # if not given autogenerated from first overthrow keys
        emojiHash: "", # autogenerated from entityUuid
        normalKeys: {
            [keyString]: {
                hasAllPermissions: true,
            },
        },
        overthrowKeys: [],
        humanReadableName: null, # optional
        email: null, # optional
    },
    updateIdentification: {
        humanReadableName: null, # optional
        email: null, # optional
        normalKeys: {
            
        }
    },
    updateToolInfo: {
        toolName: "",
        data: {
            blurb: "",
            keywords: [],
            description: null,
            links: {
                homepage: null,
                icon: null,
                iframeSrc: null,
            },
            maintainers: [],
            adjectives: {
                custom: {
                    freeAndOpenSource: true,
                    sourceAvailable: true,
                    copyleft: false,
                },
            },
            # below will be generated automatically
            # versioning: {
            #     latestNumericVersion: [],
            #     maximalVersions: {
            #         '[2]': [2,9] # example
            #     },
            # },
        },
    },
    newReleaseInfo: {
        toolName: "",
        data: {
            recursiveSha256SourceHash: "",
            sourceHashSignature: "", # autogenerated, key=verificationKey, value=signature, multiple allowed for group-managed projects
            numericVersion: [], # list of ints
            versionName: "", # kind of like a subtitle
            adjectives: {
                licenses: [
                    {
                        commonName: "",
                        ipfsHash: "",
                    },
                ],
                # keys must be camelCase and dots
                nixpkgs: {
                    automatedCreation: true,
                    unfree: null,
                    insecure: null,
                    broken: null,
                },
            },
            takesAndGives: [
                {
                    takingAnyOf: [
                        { "hardware.cuda": true, },
                        { "system.nix": true, },
                        { "system.arm64Linux": true, },
                        { "system.armv5telLinux": true, },
                        { "system.armv6lLinux": true, },
                        { "system.armv7aLinux": true, },
                        { "system.armv7lLinux": true, },
                        { "system.mipselLinux": true, },
                        { "system.32bitX86Cygwin": true, },
                        { "system.32bitX86Freebsd": true, },
                        { "system.32bitX86Linux": true, },
                        { "system.32bitX86Netbsd": true, },
                        { "system.32bitX86Openbsd": true, },
                        { "system.64bitX86Cygwin": true, },
                        { "system.64bitX86Freebsd": true, },
                        { "system.64bitX86Linux": true, },
                        { "system.64bitX86Netbsd": true, },
                        { "system.64bitX86Openbsd": true, },
                        { "system.64bitX86Solaris": true, },
                        { "system.64bitX86Mac": true, },
                        { "system.32bitX86Mac": true, },
                        { "system.arm64Mac": true, },
                        { "system.armv7aMac": true, },
                        { "system.64bitX86Windows": true, },
                        { "system.32bitX86Windows": true, },
                        { "system.wasm64Wasi": true, },
                        { "system.wasm32Wasi": true, },
                        { "system.64bitX86Redox": true, },
                        { "system.powerpc64Linux": true, },
                        { "system.powerpc64leLinux": true, },
                        { "system.riscv32Linux": true, },
                        { "system.riscv64Linux": true, },
                        { "system.armNone": true, },
                        { "system.armv6lNone": true, },
                        { "system.arm64None": true, },
                        { "system.avrNone": true, },
                        { "system.32bitX86None": true, },
                        { "system.64bitX86None": true, },
                        { "system.powerpcNone": true, },
                        { "system.msp430None": true, },
                        { "system.riscv64None": true, },
                        { "system.riscv32None": true, },
                        { "system.vc4None": true, },
                        { "system.or1kNone": true, },
                        { "system.mmixMmixware": true, },
                        { "system.jsGhcjs": true, },
                        { "system.arm64Genode": true, },
                        { "system.32bitX86Genode": true, },
                        { "system.64bitX86Genode": true, },
                    ],
                    gives: {
                        "cudaSupport": true,
                        "executable:pip": true,
                        "executable:pip3": true,
                    },
                }
            ],
            sources: [
                {
                    "url": "https://github.com/NixOS/nixpkgs/archive/e696cfa9eae0d973126399f90d2e1fd87b980ced.zip", # when URL is downloaded
                    "format": {
                        commonName: "zip",
                        ipfsUrlOfSpecification: "QmWJ8m5QRG3SZqioiDy59JUXhzsQp7ZKQpu4Vcud4RLebK",
                    },
                    "internalTargets": {
                        "nixRootFolder": ".",
                        "nixAttributePath": [],
                    },
                    "customInfo": {
                        "date": "2021-02-24",
                        "position": "/nix/store/hqc8hlzsl1qyzdyam91kvj1ww22yw538-6c36c4ca061f0c85eed3c96c0b3ecc7901f57bb3.tar.gz/pkgs/development/interpreters/python/cpython/2.7/default.nix:291",
                    },
                },
                {
                    "url": "https://github.com/NixOS/nixpkgs.git",
                    "format": "git",
                    "internalTargets": {
                        "gitCommit": "e696cfa9eae0d973126399f90d2e1fd87b980ced",
                        "nixRootFolder": ".",
                        "nixAttributePath": [],
                    },
                    "customInfo": {
                        "date": "2021-02-24",
                        "position": "/nix/store/hqc8hlzsl1qyzdyam91kvj1ww22yw538-6c36c4ca061f0c85eed3c96c0b3ecc7901f57bb3.tar.gz/pkgs/development/interpreters/python/cpython/2.7/default.nix:291",
                    },
                }
            ],
        }
    },
}